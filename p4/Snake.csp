          	.EQU KBD_CNTL,  	$000
          	.EQU KBD_STAT,  	$000
          	.EQU KBD_DATA,  	$001
          	.EQU KBD_FLUSH, 	$40
          	.EQU TIM_CNTL,      	$030
          	.EQU TIM_STAT,      	$030
          	.EQU TIM_RELOAD,     	$031
          	.EQU TIM_COUNT,     	$034
         
          	.EQU INTERRUPT_ENA,           $80
          	.EQU RESET_READY_BIT,         $40
          	.EQU START_AFTER_LOAD,        $10
          	.EQU ENABLE_RESET_AND_START,  $D0
          	.EQU ENABLE_AND_RESET,        $C0

          	.EQU CRT_BUFFER,    	$100
          	.EQU BOTTOM_RIGHT,  	$313
          	.EQU CRT_XREG,      	$314
	.EQU CRT_YREG,      	$315
          	.EQU CRT_CNTL,      	$316
          	.EQU CRT_DATA,      	$317
	.EQU CRT_ROWS,      	$0E
          	.EQU CRT_COLS,      	$26
          	.EQU CLEAR_DISPLAY, 	$01
	.EQU HOME,	$04

          	.EQU PUT_NUM,       	$E00      ; MINI_OS JSRS
          	.EQU GET_NUM,       	$E01
          	.EQU PUT_STR,       	$E05
          	.EQU PUT_NL,        	$E06
          	.EQU PUT_NUM2,      	$E07
          	.EQU PUT_CHR,       	$E08

	.EQU TOP,	0
	.EQU BOTTOM,	13
	.EQU MAX_RIGHT,	37
	.EQU MIN_RIGHT,	1
	.EQU DOWN,	2
	.EQU UP,	3
	.EQU LEFT,	4
	.EQU RIGHT,	5
	.EQU MAX,	33
	.EQU QUIT,	'x'
	.EQU START,	'\n'
	.EQU NOKKEY,	'n'
	.EQU BODY,	'O'
	.EQU NO_BODY,	' '
	.EQU FOOD,	'F'
	.EQU Q_SIZE,	600
	.EQU PLAY_DELAY,	2500
	.EQU SCORE_DELAY,	50000
	.EQU COUNTDOWN_DELAY,	10000

;main()
	LDS#	$E00
	CIE
	LDA# 0
	STA SCORE
	LDA# 3
	STA LIVES
	PSH# INPUTSEED_LEN
	PSH# INPUTSEED
	JSR PUT_STR
	ADS# 2
	JSR GET_NUM
	STA SEED
	JSR SHOWINTRO
	LDA# CLEAR_DISPLAY
	OUTB CRT_CNTL
	PSH SCORE
	PSH LIVES
	JSR SHOWSCORE
	ADS# 2
	LDA SCORE_DELAY
	OUTW TIM_RELOAD
	LDA#	KEYISR
	STA	$FF8
	LDA# ENABLE_AND_RESET
	OUTB	KBD_CNTL
	LDA	DELAY
	OUTW	TIM_VALUE
	LDA#	TIMERISR
	STA	$FFB
	LDA#	
	LDA#	ENABLE_RESET_AND_START
	OUTB	TIM_CNTL
	SIE
MAINLOOP:	NOP
	JMP	MAINLOOP

;char getKey(int *direction)
KEYISR:	PSHA
	PSHX
	LDA#	0
	OUTB	KBD_CNTL
	INB	KBD_DATA
	CMA#	'x'	
	JNE	KEY1
	HLT		;HALT IF QUIT
KEY1:	CMA#	$1B
	JNE	KEYDONE	;JUMP IF NOT ESCAPE
	LDX	DIRECTION	;XR = DIRECTION
	INB	KBD_DATA
	CMA#	UP	
	JNE	KEY2
	CMX#	DOWN	
	JEQ	KEYDONE
	STA	DIRECTION	;DIRECTION=UP
	JMP	KEYDONE

KEY2:	CMA#	DOWN
	JNE	KEY3
	CMX#	UP
	JEQ	KEYDONE
	STA	DIRECTION	;DIRECTION=DOWN
	JMP	KEYDONE

KEY3:	CMA#	LEFT
	JNE	KEY4
	CMX#	RIGHT
	JEQ	KEYDONE
	STA	DIRECTION	;DIRECTION=LEFT
	JMP	KEYDONE

KEY4:	CMA#	RIGHT
	JNE	KEYDONE
	CMX#	LEFT
	JEQ	KEYDONE
	STA	DIRECTION	;DIRECTION=RIGHT

KEYDONE:	LDA#	INTERRUPT_ENA
	OUTB	KBD_CNTL
	POPA
	IRTN

;bool moveSnake(int *head, int *tail, int direction, int Q[], int *score)
	.EQU	MOVEHEAD,11
	.EQU	MOVETAIL,10
	.EQU	MOVEDIRECTION,9
	.EQU	MOVEQ,8
	.EQU	MOVESCORE,7
	.EQU	MOVENEWLOC,4
	.EQU	MOVEX,3
	.EQU	MOVEY,2
	.EQU	MOVEOKK,1
	.EQU	MOVEFOODFLAG,0
MOVESNAKE:	BGN#	5
	PSHX
	LDA#	1
	STA !	MOVEOKK
	CLR !	MOVEFOODFLAG
	LDX* !	MOVEHEAD
	LDA& !	MOVEQ
	LDX !	MOVEDIRECTION
	CMX#	UP
	JNE	MOVESNAKE1
	SBA#	38
	STA !	MOVENEWLOC
	CMA#	CRT_BUFFER
	JGE	MOVESNAKE5
	CLR !	MOVEOKK
	JMP	MOVESNAKE5
MOVESNAKE1:	CMX#	DOWN
	JNE	MOVESNAKE2
	ADA#	38
	STA !	MOVENEWLOC
	CMA#	CRT_BUFFER + $213
	JLE	MOVESNAKE5
	CLR !	MOVEOKK
	JMP	MOVESNAKE5
MOVESNAKE2:	CMX#	RIGHT
	JNE	MOVESNAKE3
	ADA#	1
	STA !	MOVENEWLOC
	SBA#	CRT_BUFFER
	MOD#	38
	JNE	MOVESNAKE5
	CLR !	MOVEOKK
	JMP	MOVESNAKE5
MOVESNAKE3:	SBA#	1
	STA !	MOVENEWLOC
	SBA#	CRT_BUFFER
	MOD#	38
	CMA#	37
	JNE	MOVESNAKE5
	CLR !	MOVEOKK
MOVESNAKE5:	LDA !	MOVEOKK
	CMA#	0
	JEQ	MOVESNAKEDONE
	INB* !	MOVENEWLOC
	CMA#	BODY
	JNE	MOVESNAKE6
	CLR !	MOVEOKK
	JMP	MOVESNAKEDONE
MOVESNAKE6:	CMA#	FOOD
	JNE	MOVESNAKE7
	INC !	MOVEFOODFLAG	;FOODFLAG=TRUE
MOVESNAKE7:	LDA#	BODY
	OUTB* ! MOVENEWLOC
	INC* !	MOVEHEAD
	LDA* !	MOVEHEAD
	CMA#	Q_SIZE
	JLT	MOVESNAKE8
	CLR* !	MOVEHEAD
MOVESNAKE8:	TAX
	LDA !	MOVENEWLOC
	STA& !	MOVEQ
	LDA !	MOVEFOODFLAG
	CMA#	0
	JEQ	MOVESNAKE10
	INC* !	MOVESCORE
MOVESNAKE9:	PSH#	37
	JSR	RANDOM
	ADS#	1
	STA !	MOVEX
	PSH#	13
	JSR	RANDOM
	ADS#	1
	STA !	MOVEY
	MUL#	38
	ADA !	MOVEX
	TAX
	INB+	CRT_BUFFER
	CMA#	BODY
	JEQ	MOVESNAKE9
	CMA#	FOOD
	JEQ	MOVESNAKE9
	LDA#	FOOD
	OUTB+	CRT_BUFFER
	JMP	MOVESNAKEDONE
MOVESNAKE10:	LDX* !	MOVETAIL
	ADX# 1
	LDX& !	MOVEQ
	LDA#	¡® ¡¯
	OUTB+	0
	INC* !	MOVETAIL
	LDA* !	MOVETAIL
	CMA#	Q_SIZE
	JLT	MOVESNAKEDONE
	CLR* !	MOVETAIL
MOVESNAKEDONE:	LDA !	MOVEOKK
	POPX
	FIN#	5
	RTN

;int random2(int max)
	.EQU	RANDOMMAX,2
RANDOM2:	BGN#	0
	LDA	SEED
	MUL#	2779
	ADA#	1997
	MOD#	2048
	STA	SEED
	INC !	RANDOMMAX
	MOD !	RANDOMMAX
	FIN#	0
	RTN

;void showIntro()
SHOWINTRO:	PSHA
	LDA#	CLEAR_DISPLAY
	OUTB	CRT_CNTL
	PSH#	INTRO_LEN1
	PSH#	INTRO1
	JSR	PUT_STR
	ADS#	2
	JSR	PUT_NL
INTROLOOP:	INB	KBD_STAT
	CMA#	80
	JLT	INTROLOOP
	INB	KBD_DATA
	CMA#	START
	JNE	INTROLOOP
INTRODONE:	POPA
	RTN
	
;advanceTime(int delay)
TIMERISR:	PSHA
	INW	TIM_RELOAD
	CMA	SCORE_DELAY
	JNE	TIMERISER3
	LDA	LIVES
	CMA#	0
	JNE	TIMERISER2
	HLT		;IF LIVES = 0 THEN GAME OVER
TIMERISR2:	LDA	COUNTDOWN_DELAY
	OUTW	TIM_RELOAD
	LDA#	CLEAR_DISPLAY
	OUTB	CRT_CNTL
	LDA#	'3'
	OUTB	CRT_BUFFER+17
	JMP	TIMERISRDONE
TIMERISR3:	CMA	COUNTDOWN_DELAY
	JNE	TIMERISR5
	INB	CRT_BUFFER+17
	SBA#	1
	CMA#	'0'
	JEQ	TIMERISER4
	OUTB	CRT_BUFFER+17
	JMP	TIMERISRDONE
TIMERISR4:	PSH#	HEAD
	PSH#	TAIL
	PSH#	DIRECTION
	PSH#	Q
	PSH#	TIMERGOAL
	JSR	STARTSNAKE
	ADS#	5
	LDA#	PLAY_DELAY
	OUTW	TIM_RELOAD
	JMP	TIMERISRDONE
	TIMERISR5:
	PSH#	TAIL
	PSH	DIRECTION
	PSH#	Q
	PSH#	SCORE
	JSR	MOVESNAKE
	ADS#	5
	CMA#	0
	JNE	TIMERISRDONE
	DEC	LIVES
	PSH	SCORE
	PSH	LIVES
	JSR	SHOWSCORE
	ADS#	2
	LDA	SCORE_DELAY
	OUTW	TIM_RELOAD
TIMERISRDONE:	LDA#	ENABLE_RESET_AND_START
	OUTB	TIM_CNTL
	POPA
	IRTN
	
	
	


INTRO1:	.CHAR	'SNAKE\CR\LF',INTRO_LEN1

INPUTSEED:	.CHAR	'Seed', INPUTSEED_LEN
SEED:	.WORD


